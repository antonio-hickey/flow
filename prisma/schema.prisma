// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) 
  updatedAt   DateTime    @default(now())
  name        String      @db.VarChar(75)
  description String?
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  tasks       Task[]
}

model Task {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now()) 
  updatedAt     DateTime    @default(now())
  name          String      @db.VarChar(75)
  description   String?
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     Int
  finished      Boolean     @default(false)
  minutesWorked Int         @default(0)
  tags          TaskTag[]
}

model Tag {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(25)
  description   String?
  bgColor       String      @db.VarChar(6)
	fgColor       String      @db.VarChar(6)
  tasks         TaskTag[]
}

model TaskTag {
  id            Int         @id @default(autoincrement())
  task          Task        @relation(fields: [taskId], references: [id])
  taskId        Int    
  tag           Tag         @relation(fields: [tagId], references: [id])
  tagId         Int    
}
